

**Outlier 감지
- Outlier
: 이상치나 극단치, 일반적인 데이터의 범위를 넘어선 값


1. z 점수를 이용하는 방법
: 중앙값을 기준으로 표준편차가 3 또는 -3 범위의 바깥쪽에 있는 데이터를 Outlier로 간주


2. z 점수의 보정
: z 점수는 데이터가 12개 이하이면 감지를 못함
- 편차의 범위를 3.5로 늘리고 0.6745를 곱한 값을 이용


3. IQR(3사분위수 - 1사분위수) 이용
: 1사분위수(25%)보다 1.5배 작은 값이나 3사분위수(75%)보다 1.5 IQR 큰 데이터를 Outlier로 간주



**Outlier 처리


1. 제거
- 설문조사 후 이상한 데이터가 입력된 경우
- 분석 목적에 맞지 않는 데이터


2. 이상한 데이터로 표현해두고 특성 하나로 간주


3. outlier의 영향이 줄어들도록 특성 변환
- 값의 범위를 줄임(표준화, 정규화 등)
- 표준화 시 RobustScaler 이용 권장



** 시계열 데이터
- 날짜 및 시간에 관련된 데이터


1. pandas의 시계열 자료형
- datatime64 
: 부등호를 이용해서 크기비교를 할 수 있고 '-'(빼기)를 이용해서 뺄셈 가능
- Period
: 두 개의 날짜 사이의 간격을 나타내기 위한 자료형
- 일정한 패턴을 만들기 쉽게 하기 위하여 시계열 자료형을 별도로 구성


2. datatime64 생성
- 문자열 데이터를 시계열로 변경
: pandas.to_datetime() 이용
->> 날짜 형식의 문자열과 format 매개변수에 대입


3. Period
- pandas.to_period 함수를 이용해서 datatime을 Period로 생성
freq 옵션에 기준이 되는 기간을 설정
- freq 옵션
D: 1일
W: 1주
M: 1개월(월말 기준)
MS: 1개월(월초 기준)
Q: 분기말
QS: 분기초
A: 연말
AS: 초
B: 휴일 제외
H, T, S, L, U, N: 시간, 분, 초, 밀리초, 마이크로초, 나노초


5. date_range()
- 일정한 간격을 소유한 날짜 데이터의 집합을 생성
- 매개변수
start
: 시작 날짜
end
: 종료 날짜
periods
: 생성할 날자 개수
freq
: 간격
tz
: 시간대


6. 날짜 데이터에서 필요한 부분 추출하기
- dt.year, dt.month, dt.day ...
- 요일은 dt.weekday_name은 문자열로, dt.weekday는 숫자로 리턴(월요일은 0)
->> 화면에 출력할 때는 문자열로 하고 머신러닝에서 사용할 때는 숫자로 리턴 받음


7. Python에서는 날짜는 datetime 패키지의 datetime으로 제공
- 날짜 형식의 문자열을 가지고 날짜 형식의 데이터를 생성


8. shift 함수를 이용하면 기존 날짜 이동 가능
- freq 매개변수에서 간격 설정 가능


9. resampling
- 시계열 빈도 변환
- downsampling
: 상위 빈도의 데이터를 하위 빈도의 데이터로 변환하는 것
->> 반대의 과정은 upsampling

- resampling(freq, how, fill_method, closed, label, kind)

freq
: resampling 빈도(M, Q, A 등)

how
: 집계값, 집계함수를 지정하는 것으로 기본은 mean, first, last, max, median, min 등

fill_method
: 업 샘플링할 때 데이터를 채우는 옵션으로 기본은 None이나 ffill이나 bfill을 설정해서 이전값이나 이후값으로 채울 수 있음

closed
: 다운 샘플링할 때 왼쪽과 오른쪽 어느 쪽을 포함할지 설정

label
: 다운 샘플링할 때 레이블을 왼쪽 또는 오른쪽을 사용할 것인지 여부


10. 날짜 데이터가 데이터프레임이 존재하는 경우 날짜 데이터를 인덱스로 설정하면 특정 시간 단위로 집계하는 것이 편리



** 이동시간 윈도우
: 통계적 수치를 계산할 때 최근의 데이터에 가중치를 부여해야 한다는 개념
- 평균을 구할 때 데이터 전체의 평균을 구하는 것보다 최근의 데이터 몇 개의 평균을 구하는 것이 미래 예측 가능성이 더 높아질 수도 있음
- 이전 데이터와 최근의 데이터를 같이 사용한다면 최근 데이터에 가중치 부여하는 것이 미래 예측 가능성 높아질 수도 있음


1. rolling 함수
: 단순 이동 평균을 계산해주는 함수
- window 매개변수에 데이터 개수를 설정하면 데이터 개수 단위로 연산 수행


2. ewm 함수
: 지수 이동 평균을 계산해주는 함수
- 지수 이동 평균은 최근의 데이터에 가중치를 부여하는 방식의 평균
->> 주식 데이터는 이 평균을 사용함
- 기간(span)을 설정하면 아래 수식으로 평균
->> 데이터가 3개인 경우
> x1, x2, x3 (가장 최근 데이터)
> x3 + (1 - (1 -span))x2 + (1 - (1 - span))**2x3
> (1 - span)을 알파, 알파 계산 시 1/span이 span 자리에 대입
> x3 + (1 - (1 -span))x2 + (1 - (1 - span))제곱x3 / 1 + (1 - 알파) + (1 - 알파)제곱

* 지수 이동 평균
* 반영률 조정
* 불량률 낼 때도 이 방법으로
* 알파 = 1/span

2500 2000 2200 2700 .., 알파 = 1/3

2500 + (1-1/3) * 2000 + (1-1/3)**2 * 2200 + (1-1/3)**3 * 2700 + ...
/ 1 + (1-1/3) + (1-1/3)**2

* 시간에 따라 변경되는 데이터를 가지고 예측할 때는 최근의 데이터에 가중치를 부여해야 함
* ->> 에이징 커브

* 뭔가 시간할인율이랑 비슷