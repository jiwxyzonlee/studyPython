
** Python


1. 설치

- python만 설치
- anaconda와 같은 배포판 설치
: 자주 사용하는 라이브러리와 IDE가 같이 설치
- python 기본 문법만 학습하거나 python 애플리케이션 만드는 것이 목적일 때는 python만 설치하고 데이터 분석을 위해서 설치할 때는 anaconda와 같은 배포판 설치


2. IDE
- python만 설치된 경우는 python console이나 IDLE 이용
- anaconda는 jupyter notebook(보고서 만들기)과 spyder(애플리케이션 만들기)를 제공
->> 초보자가 처음 분석을 공부할 때는 jupyter notebook보다는 spyder를 권장
- vscode나 pycharm(가상환경 만들기가 편함 - 프로젝트할 때 유용)을 별도로 설치해서 사용


3. 파이썬 프로그램의 구성 요소

1) Literal
: 개발자가 직접 입력하는 데이터

2) variable
: 데이터를 저장해두고 다음에 다시 사용하기 위해서 붙인 이름

3) Expression(표현식)
: 한번에 수행되는 문장

4) Function
: 자주 사용되는 변수나 리터럴 그리고 표현식을 묶어서 하나의 메모리 영역을 할당 받아서 수행하도록 해주는 개체
- 실행 단위

5) Class & Instance(객체)
: 자주 사용하는 데이터와 함수를 묶은 것

6) Module
: 하나의 파일
- 하나의 파일 안에 여러 개의 클래스 및 함수가 존재할 수 있음

7) Package
: Module의 집합
- 배포 단위

8) comment(주석)
: 실행과는 상관없는 문장

- 데이터 분석 분야에 일하고자 할 때 주석을 습관화할 필요가 있음

4. 작성 규칙
- 한 번에 실행되는 문장(표현식)은 한 줄에 작성
- 한 줄에 표현식이 2개이면 ;으로 구분
- 블럭을 만들 때는 반드시 ;을 붙이고 블럭 내의 문장은 일정한 들여쓰기가 필요
->> 블럭은 제어문, 함수, 클래스, 예외처리구문임
->> 들여쓰기를 해제하면 블릭이 끝남
- 파이썬은 줄 단위로 해석하면 실행되며 한 번에 실행되는 문장의 끝에서 데이터를 출력할 때는 데이터만 남겨도 출력이 됨
- 콘솔 출력은 print(데이터)
- 여러 개 출력할 때는 ,로 구분해서 설정하면 값이 출력
- #! 는 주석이 아님
->> 유닉스의 shebang으로 프로그램의 일부분임

#!_*_coding:인코딩 방식_*_
: 이 문장은 아래 파이썬 코드의 인코딩 설정임


5. python에서의 literal 작성 방법

1) 정수는 10진수로 작성

2) 실수는 정수부분.소수부분으로 작성

3) 복소수 가능 : 정수 + 또는 - 정수j

4) boolean 데이터 : True와 False

5) 문자열: ''나 "" 사이에 한 줄의 문자열을 대입

'''여러줄'''
 또는 
"""여러줄"""
- 어떤 코드를 실행시키지 않을 의도로 따옴표 3개로 묶는 경우가 있음
- 역슬래시 다음에 영문자 1개가 오면 제어문자로 특별한 의미를 갖는 문자가 됨

\n
: 줄바꿈

\t
: 탭

\"
: "

\'
: '

\\
: \

6) byte 배열(bytes)

b'문자열'

b'\코드\코드 ...'

7) list
: 비교 가능한 데이터의 모임

[데이터, 데이터, ...]

8) tuple
: 변경 불가능한 데이터의 모임

(데이터, 데이터, ...)

9) set
: 중복 불가능한 데이터의 모임
{데이터, 데이터, ...}

10) dict
: 키와 값의 모임

{키:값, 키:값, ...}

11) None
: 데이터 없음을 의미


6. 가장 중요한 함수

1) type(데이터)
: 데이터의 자료형을 문자열로 리턴

2) dir(데이터)
: 데이터가 사용할 수 있는 속성과 함수의 목록을 리턴

3) help(함수)
: 함수를 사용하는 방법과 설명
- 직접 만든 함수의 결과가 아니면 type을 통해 확인해 보고 사용할 수 있는 속성과 함수의 목록을 확인해야 하며 help로 도움말도 보는 것이 좋음


7. keyword
- 파이썬이 만들어 둔 예약어
- 기능이 이미 구현되어 있음
- 다른 용도로 사용할 수 없음

import keyword
print(keyword.kwlist)

8. identifier(식별자)
- 개발자가 기능을 정할 수 있는 이름
- 식별자로 keyword는 사용할 수 없음
- 식별자를 만들고 기능을 부여하면 자신의 영역에 없는 식별자면 자신의 영역에 새로 만들고 기능을 부여하고 자신의 영역에 존재하는 식별자면 기능을 수정함

- 기능을 부여하기

이름 = 기능;

- 식별자의 기능을 찾는 순서
현재의 모듈 #파이썬의 설정에 따라 다름

- 파이선이 제공하는 식별자의 이름을 자신의 모듈에서 값을 대입하면 기존의 기능을 사용할 수 없음

- 식별자를 찾는 순서
import sys
print(sys.path)
- Mac이나 Linux 등에는 Python 2.x버전이 이미 설치되어 있음
->> 그래서 만약 3.x 설치하면 기존 버전과 함께 존재하게 됨
->> 파이썬 패키지를 다운로드 받았는데 없다고 메시지가 출력되는 경우가 있음
->> path 확인 필요


9. Variable
: 데이터를 저장하고 저장한 데이터에 이름을 붙이는 것
식별자 = 데이터
- 변수는 생성된 블럭에서만 사용 가능
->> 블럭이 없어지면 메모리도 없어지기 때문에 같이 소멸됨
- 변수를 만드는 이유는  데이터를 다음에 또 사용하기 위해서임
- 리터럴이나 연산식의 결과 또는 함수의 결과를 바로 사용하지 않고 변수에 저장한 후 사용하는 것을 습관화하는 것이 좋음
- 데이터 분석을 할 때는 특별한 경우가 아니면 기존 변수를 수정해서 사용하지 않는 것이 좋음
->> 중간 결과가 전처리한 데이터들은 새로운 변수에 저장하는 것을 습관화해야 함


10. 연산자

1) 산술연산자

+
: 더하기
- 동일한 종류의 데이터끼리만 사용 가능
->> 숫자끼리는 덧셈을 하지만 숫자가 아닌 경우는 결합

-
: 숫자끼리 뺄셈

*
: 곱하기
- 숫자끼리는 곱셈
- 숫자가 아닌 데이터와 * 숫자 : 데이터 반복 출력
2 * 3 
>>> 6

"Python" * 3
>>> PythonPythonPython

/
: 나누기

//
: 몫만 정수로 출력

%
: 나눈 후 나머지

**
: 거듭제곱
3 ** 3
>>> 27

2) 비교 연산자
- 동일한 자료형끼리만 가능
>
>=
<
<=
->> 숫자 데이터에만 사용

==
!=
->> 모든 자료형 사용 가능
- 연산의 결과는 True 아니면 False
- bool 데이터와 숫자 데이터 사이에 사용되면 bool 데이터는 True일 시 1 False일 시 0으로 간주

1 == True
->> 실제로 이렇게 사용하는 것은 드물다

- 산술연산자보다 우선 순위가 낮음

3) 비트 논리 연산자
: 분석이나 이미지 처리, Embedded (IoT) 에서 중요
- 정수 데이터를 2진수로 변환해서 비트 단위로 연산을 한 후 결과를 다시 정수로 변환해주는 연산자
- 비트 각각을 연산
&
: and
- 둘다 1인 경우만 1 나머지 경우는 0

|
: or
- 둘다 0인 경우만 0 나머지 경우는 1

^
: xor
- 두 개가 같은 경우는 0 다른 경우는 1

~
: 1의 보수 연산

- 각각 연산을 해서 결과를 만든다는 것이 중요
->> 데이터의 모임끼리 이 작업을 수행하면 데이터 각각을 연산해서 데이터의 모임으로 결과를 리턴

<<
: 왼쪽의 데이터를 오른쪽의 숫자만큼 왼쪽으로 shift
>>
: 왼쪽의 데이터를 오른쪽의 숫자만큼 오른쪽으로 shift

4) 조건 논리 연산자

&&
: and

||
: or

- 데이터 전체를 하나로 보고 연산을 해서 결과도 하나만 생성
- 연산의 결과를 True 또는 False로 리턴

5) 기타 연산자
in
: 왼쪽의 데이터가 오른쪽에 소속되어 있는지를 리턴

not in
: 왼쪽의 데이터가 오른쪽에 소속되지 않았는지를 리턴

is
: 동일한 데이터를 가리키는지를 리턴

is not
: 동일하지 않은 데이터를 가리키는지를 리턴

type(데이터)
: 데이터의 자료형을 리턴

id(데이터)
: 데이터의 참조를 리턴

- in과 type이 자주 사용
- 나머지는 공부할 때만 학습

6) 할당 연산자
=
: 오른쪽의 값을 왼쪽의 변수에 대입

+=
: 왼쪽 변수의 값에 오른쪽의 값을 +한 후 결과를 왼쪽의 변수에 대입

** 티스토리에 있는 자료 참고

