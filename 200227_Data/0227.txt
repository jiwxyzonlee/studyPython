데이터 분석이나 머신 러닝에서 많이 사용하는 패키지
=>자료구조 패키지: numpy, pandas - 데이터를 만들고 수집하고 가공하는 패키지
=>시각화 패키지: matplotlib, seaborn, pandas, folium(지도, 단계구분도)
=>통계 : scipy
=>머신러닝 : sklearn
=>머신러닝, 딥러닝: tensorflow, keras, pytorch
=>이미지: numpy, opencv

=>numpy 의 ndarray 가지고 하는 일들은 대부분 list로도 대체 가능

**numpy
=>고성능 과학계산이나 선형대수를 위해서 제공되는 패키지
1.ndarray - numpy가 제공하는 데이터의 모임(자료구조) 
=>벡터 연산을 수행하기 때문에 요소 각각에 연산을 수행하는 경우 기존의 list 나 tuple, set에 비해서 연산속도가 빨라서 머신러닝이나 딥러닝에서 사용
=>모두 동일한 자료형으로 만들어짐

1)기본적인 생성
=>ndarray((행의 수(,...))): 데이터의 개수를 직접 지정해서 생성, 권장하지 않음
=>array(iterator): 기존의 데이터의 모임을 가지고 생성해서 리턴
생성할 때 dtype 매개변수를 이용해서 데이터 각각의 자료형을 지정 가능
dtype을 설정하지 않으면 자료형을 유추해서 생성

2)구조 파악을 위한 속성
=>dtype: 각 요소의 자료형
=>ndim: 배열의 차원
=>shape: 각 차원의 크기를 tuple로 리턴
=>size: 데이터 개수
=>itemsize: 각 요소의 메모리 크기
=>nbytes: 전체 메모리 크기


3)실습
#작업 중인 디렉토리
import os
#print(os.getcwd())

#numpy import
#import numpy

#numpy 를 np라는 이름으로 사용
import numpy as np

#list 나 tuple을 이용해서 array 생성
li = [100, 300, 200]
#print(dir(li))
ar = np.array(li)
print(ar)

tu = (100, 200)
#print(dir(tu))
ar = np.array(tu)
print(ar)

#2차원 배열
ar = np.array([[100, 200, 300], [400, 500, 600]])
print(ar)

#서로 다른 자료형의 데이터가 모여 있으면 동일한 자료형
#으로 변경 합니다.
ar = np.array([['100', 200, 300], [400, 500, 600]])
print(ar)
#각 요소의 자료형
print(ar.dtype)

#dtype을 설정해서 정수 배열로 만들기
ar = np.array([['100', 200, 300], [400, 500, 600]]
,dtype=int)
print(ar)
#각 요소의 자료형
print(ar.dtype)

print(ar.ndim) # 전체 차원을 리턴
print(ar.shape) #각 차원의 데이터 개수를 튜플로 리턴

2.일정한 숫자 패턴을 이용한 생성
=>arange(start, stop, step, dtype)
start 부터 stop 바로 앞까지 step 간격으로 생성하고 자료형은 dtype으로 설정
start는 생략가능한데 생략하면 0
step은 생략가능한데 생략하면 1
dtype은 생략하면 정수

=>linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0)
start 부터 stop 까지는 num의 개수를 일정한 간격의 배열을 만들어서 리턴
axis는 축 - 0과 1을 변경하면 축의 방향이 변경됩니다.
               0이 행이면 1은 열, 0이 열이면 1은 행

3.특수 행렬을 이용한 array(배열) 생성
=>zeros 나 ones 라는 함수를 이용해서 0이나 1로 채워진 함수를 생성할 수 있음
=>zeros_like 나 ones_like 함수는 배열을 매개변수로 받아서 그 배열의 모든 요소를 0이나 1로 채원진 배열을 리턴
=>empty 나 empty_like는 초기화하지 않은 값으로 배열을 생성
=>eye 함수는 단위행렬 - 대각선 방향으로 1이 채워진 배열
이 함수에 매개변수로 열의 개수나 k 라는 매개변수를 이용해서 대각의 위치를 설정

1 0 0
0 1 0
0 0 1

k=1
0 1 0
0 0 1
0 0 0

=>행과 열 수 가 같은 행렬(정방행렬)을 매개변수로 받아서 대각 요소만 가지고 다시 배열을 만들어주는 diag도 있음

=>이런 함수들을 이용해서 직접 배열을 생성해야 하는 경우는 드물고 라이브러리들이 내부적으로 이러한 배열들을 생성

#단위 행렬 만들기(대각선 방향의 요소만 1인 행렬)
#정방 행렬 - 행과 열의 개수가 같은 행렬
#단위 행렬은 정방행렬이어야 합니다.

#크기가 3인 단위 행렬 생성
ar = np.eye(3)
print(ar)
#1의 위치를 1개 증가
ar = np.eye(3, k=1)
print(ar)
#대각 요소만 뽑아서 1차원 배열을 생성
ar = np.diag(ar)
print(ar)

4.희소행렬(Sparse Matrix)
=>0이 아주 많고 다른 데이터가 드문 행렬
=>반대되는 행렬은 밀집행렬(Dense Matrix) - 배열을 Dense List 라고 하기도 합니다.
=>scipy 패키지의 sparse 모듈을 이용해서 생성
csr_matrix 라는 함수에 ndarray를 대입하면 됩니다.
=>밀집행렬로 변환하고자 할 때는 toarray()를 호출하면 됩니다.
=>넷플릭스 와 같은 곳에서 고객이 본 영화를 행렬로 만든다면 고객은 거의 모든 영화를 보지 않았을 가능성이 큽니다.
밀집행렬로 만들게 되면 메모리 부담이 큼
이런 경우는 고객이 본 영화의 대한 부분만 저장하면 부담이 적습니다.
이런 경우에 희소행렬을 이용합니다.

#희소행렬과 밀집행렬 변환
import numpy as np
#scipy 의 sparse 모듈 가져오기
from scipy import sparse

#5*5 단위 행렬 생성
ar = np.eye(5)
print(ar)

#희소행렬로 변환 - 0이 아닌 값의 위치와 값을 저장
sp = sparse.csr_matrix(ar)
print(sp)

#밀집 행렬로 변환
ar = sp.toarray()
print(ar)

5.ndarray의 자료형
=>생성할 때 dtype 매개변수로 설정 가능
=>dtype 속성으로 확인 가능
=>생성한 후 astype 함수를 호출해서 자료형을 변경할 수 있음
=>정수 자료형: int8, 16, 32, 64, uint8, 16, 32, 64
uint는 음수가 없는 자료형
=>실수 자료형: float16, 32, 64, 128
=>복소수 자료형: complex64, 128, 256
=>bool
=>object :  기본 자료형 이외의 클래스로부터 만들어진 인스턴스 
=>string_: 문자열
=>unicode_: 유니코드 문자열

6.행렬 변환
1)reshape(): 행렬의 차원이나 크기를 변경할 때 사용, 차원을 변경할 때는 튜플로 각 차원의 개수를 설정하면 됩니다.
-1을 대입하면 1차원 배열로 만들어 집니다.

2)flattern 함수를 이용하면 다차원 배열을 1차원 배열로 변환해주는 함수

3)reshape는 배열을 변경하는 것이고 flattern은 새로운 배열을 만들어서 리턴해주는 함수

#행렬의 차원 변환
#0-9까지 10개의 요소로 된 배열 생성
ar = np.arange(0, 10)
print(ar)

#행 2개 열 5개 배열로 변환
print(ar.reshape(2, 5))

7.배열의 요소 선택
1)1차원 배열의 경우는 list 와 유사
=>배열명[인덱스]를 이용하면 인덱스 번째 데이터 리턴
=>인덱스에 음수를 대입하면 뒤에서부터 순서대로 접근해서 데이터 리턴
=>배열명[시작위치:종료위치]를 이용하면 시작위치부터 종료위치 앞까지 데이터를 리턴
시작위치를 생략하면 0 종료 위치를 생략하면 len(배열) 처럼 마지막 인덱스 뒤
: 만 입력하면 전체

2)다차원 배열
=>[인덱스][인덱스] 형태처럼 인덱스를 설정해도 되고 [인덱스, 인덱스]로 설정해도 됩니다.
=>인덱스를 생략하면 전체가 됩니다. [][인덱스] 하면 행 전체
[인덱스][]하면 열 전체


3)인덱싱을 이용해서 가져온 데이터들은 링크가 전달
복제를 하고자 하면 copy()를 호출

#인덱싱 과 copy
import numpy as np

ar = np.array([100, 200, 300, 400])

#0-1 번까지 요소를 br에 링크를 전달
br = ar[0:2]
print(br)

#원본 데이터를 변경 - ar의 데이터를 변경하면
#br의 데이터도 변경
ar[0] = 10000
print(br)

#데이터를 복사해서 전달
cr = ar[0:2].copy()
print(cr)

#원본을 변경하면 br은 변경되지만 cr은 변경안됨
ar[0] = 1300
print(br)
print(cr)

8.Fancy Indexing
=>list를 이용해서 인덱싱
=>Fancy Indexing 은 copy를 생성
배열명[[인덱스 나열]] 의 형태
=>2차원의 경우에는 ix_ 라는 함수를 이용해서 이용해서 Fancy Indexing 이 가능
배열명.ix_(행의 list, 열의 list)

#import numpy as np

#쓰레기 값을 가지고 배열을 생성
ar = np.empty((10, 3))
print(ar)

#행들을 선택 - 0,1,3,5 를 선택 - copy
br = ar[[0,1,3,5]]
print(br)

#현재는 같은 값을 가지고 있음
print(ar[0,0])
print(br[0,0])

#copy가 되었으므로 ar의 데이터가 변경되더라도
#br의 데이터는 영향을 받지 않음
ar[0,0] = 90
print(ar[0,0])
print(br[0,0])

#3,5 행과 0,2 열의 데이터 추출
cr = ar[[3,5], [0,2]] #3,0 과 5,2 번만 추출
print(cr)
#3,5번행 그리고 0,2번 열을 선택
dr = ar[np.ix_([3,5], [0,2])]
print(dr)

9.행과 열 전치(Transpose)
=>행과 열의 위치 변경하기
=>2차원의 경우는 T라는 속성으로 변경
=>transpose()라는 함수를 이용할 수 있는데 이 함수는 매개변수로 축의 순서를 list로 전달받습니다.
2차원의 경우는 생략하면 행과 열을 변경
3차원의 경우는 행, 열, 면의 순서를 연속적으로 설정할 수 있습니다.

#행과 열의 순서 변경
ar = np.arange(0,16)
print(ar)

#2차원 배열로 변환
br = ar.reshape(4,4)
print(br)
#행렬 변환 - 2차원은 T 나 transpose 가 동일
print(br.T)
print(br.transpose())

#3차원으로 변환
cr = ar.reshape((2,2,4))
print(cr)
#4,2,2 로 변경
print(cr.transpose())
#2,4,2로 변경
print(cr.transpose(0,2,1))

10. python에서 함수 생성
1)일반적인 함수 생성
#매개변수 없을 수 있음
def 함수이름(매개변수 이름 나열):
	함수 내용
	return 데이터 #생략 가능

2)람다 함수 - 1줄 짜리 이름없는 함수
lambda 매개변수: 함수내용

11.배열의 모든 요소에게 함수를 적용한 후 그 결과를 리턴받기
1)for를 이용해서 배열의 모든 데이터를 순회하면서 적용
=>각각의 요소를 리턴받아서 다시 array를 생성해야 함

2)numpy의 vectorize를 이용
=>numpy.verctorize(함수내용)을 호출해서 벡터화된 함수를 만들고 이 함수에 배열을 대입하면 함수를 수행한 결과를 가지고 배열을 생성해서 리턴해 줍니다.
=>이 방법은 for를 이용해서 구현했기 때문에 속도가 빠르지는 않음

3)함수는 매개변수가 1개이고 반드시 리턴을 해야 합니다.
매개변수는 배열의 각 요소가 대입되고 리턴을 받을 것을 가지고 새로 배열을 만들어야 하기 때문입니다.

#배열의 모든 요소에게 함수를 적용해서 새로운 배열 만들기
ar = np.arange(0,5)
#위의 배열에 전부 5를 더한 결과를 가지고 새로운 배열을 생성
def plus5(x):
    return x + 5

#벡터화된 함수를 생성
#vec_func = np.vectorize(plus5)
#람다 함수 이용    
vec_func = np.vectorize(lambda x:x+5)

#벡터와된 함수를 적용
result = vec_func(ar)
print(result)

12.연산자 오버로딩
=>파이썬이 제공하는 연산자를 클래스 안에서 다시 정의해서 사용하는 것
=>__함수이름__ 를 재정의를 하면 연산자를 사용할 수 있도록 해줍니다.
대표적인 예가 __add__(a, b) 메소드를 재정의하면 + 연산을 사용할 수 있습니다.
__sub__ 메소드를 재정의 하면 -연산을 사용할 수 있습니다.
__iter__ 메소드를 재정의하면 for를 사용할 수 있습니다.
=>dir로 확인한 속성이나 메소드 중에서 __로 시작하는 것들은 이름을 직접 호출하는 것이 아니고 다른 방식으로 호출해야 합니다.
python에서 __로 시작하는 것은 객체지향언어의 private에 해당합니다.

13.ndarray 의 연산
1)동일한 차원을 갖는 array 의 연산
=>산술연산, 비교연산(>,>=,<,<=, ==, !=), 할당연산(+=, -=, *=, /=)을 수행할 수 있음
=>위치가 동일한 데이터끼리 연산을 해서 연산을 수행한 배열과 동일한 차원의 동일한 크기의 배열을 리턴

=>numpy.logical_and(a, b): a 배열의 원소와 b 배열의 원소가 모두 True 이면 True 그렇지 않으면 False
=>numpy.logical_or(a, b): a 배열의 원소와 b 배열의 원소가 모두 False 이면 False 그렇지 않으면 True
=>numpy.logical_xor(a, b): a 배열의 원소와 b 배열의 원소가 같으면 False 다르면 True
=>차원도 같아야 하지만 데이터의 개수도 같아야 합니다.

import numpy as np

ar = np.arange(1,6)
#100부터 105까지 5개로 분할하는데 마지막 숫자는 미포함
br = np.linspace(100, 105, num=5, endpoint=False)
#print(ar)
#print(br)
#덧셈 => 숫자 배열
result = ar + br
print(result)
#크기비교 => bool 배열
result = ar > br
print(result)
#논리 연산 - 0이 아닌 숫자는 True
result = np.logical_xor(ar, br)
print(result)

2)차원이 다른 크기의 연산 - broadcast 연산
=>배열과 scala data(1개)은 배열의 모든 요소와 scala data 와 연산을 해서 그 결과를 배열의 차원과 크기가 동일한 배열로 리턴
=>차원이 다른 배열의 연산은 적은 차원의 배열을 큰 차원의 배열에 전부 연산해서 큰 차원의 배열로 리턴 - 차원은 다르지만 연산을 하는 배열끼리의 크기는 같아야 합니다.

#차원이 다른 배열의 연산 - Broadcast 연산
ar = np.array([100, 200, 240])
#배열의 각 요소에서 100을 뺀 후 배열로 리턴
result = ar - 100
print(result)

br = np.arange(0,6)
cr = br.reshape(2,3)
print(cr)

result = ar + cr
print(result)

dr = br.reshape(3,2)
result = ar + dr
print(result)

14.boolean indexing
=>인덱스 자리에 bool 의 배열을 대입하면 True에 해당하는 인덱스의 데이터만 리턴
#boolean 색인
ar = np.array([100, 200, 301, 28])

print(ar % 2 == 0)

#배열의 인덱스 자리에 bool 배열을 대입하면 
#True 인 데이터만 리턴
print(ar[ar % 2 == 0])

15.난수(random)
=>seed: 난수표 번호 - 함수들에서는 random_state 라는 옵션으로 사용
=>복원 추출: 뽑아낸 데이터를 다시 집어넣고 다시 추출
=>비복원 추출: 뽑아낸 데이터를 다시 집어놓지 않고 남은 데이터에서 추출
=>numpy.random 모듈이 난수를 추출하는 모듈
=>seed 라는 함수를 이용해서 seed 설정
=>permutation(): 정수를 대입하면 0부터 정수 이전까지의 배열을 랜덤하게 생성해서 리턴
배열을 대입하면 배열의 데이터를 랜덤하게 배치해서 리턴
비슷한 용도의 함수로 shuffle()이 있음
=>rand(): 균등 분포에서 표본 추출 - seed를 정해서 순서대로 리턴
=>randint(): 범위를 설정해서 범위 내의 정수 중에서 리턴, size를 이용해서 개수 지정 가능
=>normal(): 정규분포에서 표본 추출 - size를 이용해서 개수 지정 가능
=>binomial(n, p, size): n 은 데이터의 분포(10 - 0부터 10까지), p는 확률

#난수 생성
import numpy as np
#배열 생성
ar = np.arange(0,48)
#print(ar)
#배열의 데이터 순서를 랜덤하게 배치
np.random.shuffle(ar)
print(ar)

#5개의 랜덤한 숫자를 추출 - 실행할 때 마다 다름
print(np.random.normal(size=5))
#seed 고정 - 실행할 때 마다 동일
np.random.seed(seed=100)
#5개의 랜덤한 숫자를 추출
print(np.random.normal(size=5))

16.numpy 의 단항 함수 - pandas 의 Series 나 Dataframe에서 그대로 사용 가능
1)기본 통계 함수
sum(합계), mean(평균), median(중간값), max(최대값), min(최소값), var(분산), std(표준편차), percentile(데이터와 백분율을 입력받아서 백분율에 해당하는 데이터를 리턴)
=>잔차: 평균과의 차이 - 잔차의 합은 + 와 - 가 존재하기 때문에 값이 상쇄되서 데이터의 분포를 이해하는데 어려움이 있어서 제곱한 분산을 사용
=>분산: 평균과의 차이를 제곱한 것
=>표준편차: 분산의 제곱근
=>표준편차를 계산할 때 데이터 개수로 나누지 않고 데이터개수 - 1로 나눕니다.
=>2차원 이상의 배열일 때 axis 옵션을 이용하면 행이나 열단위로 통계 함수를 적용 가능

#기본 통계함수
ar = np.arange(1,10)
ar = ar.reshape(3,3)
print(ar)

#모든 데이터를 더한 결과
print(np.sum(ar))
#행 단위 열단위로 합계
#axis 옵션은 차후로도 동일한 용도로 사용되므로 기억
print(np.sum(ar, axis=0)) #열
print(np.sum(ar, axis=1)) #행


2)배열 통계
=>argmin, argmax: 최소값과 최대값의 인덱스를 리턴
=>prod: 곱
=>nansum, nanprod: None 을 0 과 1로 간주해서 합과 곱을 구해서 리턴
None 과의 연산은 무조건 None
=>cumsum, sumprod: 누적합과 누적곱
=>diff: 앞 요소와의 차이를 배열로 리턴

3)None 을 numpy.nan으로 표기

4)논리 함수
numpy.isnan(): nan 포함 여부 리턴

=>여기까지는  단항(Unary - 데이터가 1개만 있으면 수행되는) 함수

17.numpy 의 이항 함수 - 데이터가 2개 있어야 수행되는 함수
=>add, subtract, multiply, divide, floor, divide
=>power(첫번째 배열의 데이터에 두번째 배열의 데이터만큼 제곱)
=>maximum, minimum, fmax, fmin
=>mod
=>greater, greater_equal, less, less_equal, equal, not_equal
=>logical_and, logical_or, logical_xor

=>where(bool 배열, True일 때 선택할 데이터, False일 때 선택할 데이터)

#2개의 배열에서 데이터 골라서 새로운 배열 만들기
ar = np.array([100,200,300,400])
br = np.array([101,201,301,401])
cond = np.array([True, False, False, True])
#cond 값의 True이 면 ar에서 False이면 br에서 추출
result = np.where(cond, ar, br)
print(result)

18.집합관련 함수
=>unique: 중복제거
=>intersect1d(): 교집합
=>union1d(): 합집합
=>in1d(): 데이터의 존재 여부를 bool 배열로 리턴
=>setdiff1d(): 차집합
=>setxor1d(): 어느 한쪽에만 존재하는 데이터

19.배열을 분할해주는 함수
=>split
=>axis 옵션을 이용해서 행방향으로 분리할지 열방향으로 분리할 지 설정할 수 있음
=>첫번째 파라미터는 배열이고 두번째 파라미터는 데이터의 개수인데 정수 대신에 list를 사용하면 list에 있는 숫자 대로 데이터를 분할합니다.

20.데이터 정렬
=>sort
=>kind 옵션에 정렬 방법을 설정
=>numpy.sort 에 배열을 대입하면 정렬한 데이터를 리턴
배열.sort를 하게되면 배열 자체를 정렬합니다.

##데이터 정렬
ar=np.array([30, 200, 300, 400, 210, 40])
help(ar.sort)
result = np.sort(ar)
print(result)

br = ar.reshape(2,3)
print(br)
br.sort(axis=1)
print(br)













 