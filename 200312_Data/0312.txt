**지수 이동 평균
=>DataFrame.ewm(span=가중치를 부여할 데이터 개수).mean()

알파 = 1/span

최근의데이터 + (1-알파)이전데이터 + (1-알파)제곱 * 그 이전 데이터

=>최근의 데이터 반영 비율을 높이고 이전 데이터의 반영 비율을 줄여서 계산하는 방식
=>주가 데이터에 많이 사용
주가는 취근 데이터의 추세를 반영하는 것이 예측의 정확성을 높여주기 때문입니다.

**시계열 데이터에서의 누락된 값 
=>시간의 간격이 일정한 상태에서 데이터가 누락된 경우라면 제거를 하는 것보다는 패턴을 확인해서 데이터를 대입하는 것이 좋습니다.

2019-01-01 : 100
2019-02-01 : 200
2019-03-01 : None
2019-04-01 : 400

=>DataFrame 의 interpolate 함수를 호출하면 누락된 값을 채워줍니다.
매개변수가 없으면 선형으로 관계를 파악해서 채워주고 method에 quadratic 을 설정하면 비선형으로 채워줍니다.

aX + b : 일차 방정식 - 선형 : 데이터의 분포가 직선에 가까워집니다.
aX2 + bX + c : 이차 방정식 이상 - 비선형 : 데이터의 분포가 곡선에 가까워집니다.

머신러닝을 할 때도 회귀나 분류하기 전에 데이터의 분포를 확인해야 합니다.
데이터의 분포를 확인할 때는 산포도(scatter) 를 많이 이용합니다.

**pandas 의 함수 매핑
=>pandas에서는 Series 나 DataFrame의 개별 요소에 동일한 함수를 적용하고자 하는 경우에 apply 메소드를 이용합니다.
1.Series가 apply 메소드를 호출하면 각 요소에게 함수를 적용한 후 그 결과를 가지고 다시 Series를 만들어서 리턴

2.DataFrame에 적용을 하게 되면 적용방법에 따라 Series 가 되기도 하고 DataFrame이 리턴되기도 합니다.
axis 옵션을 이용해서 열과 행단위로 데이터를 대입할 수 있습니다.
axis=0이 기본값으로 열단위로 대입하는데 1을 설정하면 행단위로 함수에 대입

=>Series는 하나의 열의 개념이고 DataFrame은 행열(Matrix - Table)
=>머신러닝에서는 데이터의 단위가 대부분 Matrix 입니다.
DataFrame['컬럼이름'] : Series
DataFrame[['컬럼이름']] : DataFrame
pandas 자료구조에서 .values 하게되면 컬럼이름을 제거하고 데이터만으로 구성된 numpy.ndarray를 리턴합니다.
=>머신러닝에서는 컬럼이름이 필요없습니다.

**DataFrame 결합
1.merge()
=>2개의 DataFrame이나 Series를 합치기 위한 함수
=>첫번째 와 두번째 매개변수는 합치기 위한 Series나 DataFrame을 설정해야 하는데 left 와 right 매개변수로 대입해도 됩니다.
=>하나 이상의 key를 가지고 결합
=>관계형 데이터베이스의 join 과 유사
=>별다른 설정이 없으면 동일한 컬럼이름을 찾아서 join
=>직접 join key를 지정하고자 하면 on 매개변수에 컬럼이름을 설정
=>양쪽의 key이름이 다른 경우에는 left_on 그리고 right_on 매개변수를 이용해서 직접 key를 설정
=>기본 merge는 inner join의 개념
=>어느 한쪽에만 존재하는 데이터를 merge에 참여시키고자 할 때는 how라는 매개변수에 left, right, outer 중에 하나를 설정합니다.
이러한 join 방식을 Outer Join 이라고 합니다.

=>key가 아닌 컬럼 중에 양쪽에 동일한 이름으로 존재하는 컬럼이 있으면 이 때는 _x 와 _y라는 이름이 자동삽입되는데 이것을 변경하고자 하면 suffixes 옵션에 튜플로 추가될 이름 2개를 설정하면 됩니다.

=>양쪽에 동일한 의미를 갖는 컬럼이 없는 경우 index를 이용해서 join을 할 수 있는데 이 경우에는 left_index=True 그리고 right_index=True를 추가해주면 됩니다.

=>merge를 수행하면 key 값으로 정렬을 수행하는데 sort 옵션에 false를 설정하면 정렬하지 않습니다.

2.join
=>인덱스를 기준으로 합쳐주는 함수
DataFrame.join(다른 데이터 프레임)

3.concat
=>구성형태와 속성이 균일한 경우 행 또는 열방향으로 이어 붙이는 함수
=>merge 나 join 은 행방향으로 결합
=>join 옵션에 inner를 적용하면 양쪽에 모두 존재하는 데이터끼리 결합하고 outer를 설정하면 한쪽에만 존재하는 데이터도 결합을 하는데 기본값이 outer
=>axis옵션에 0을 설정하면 열방향으로 합치고 1을 설정하면 행 방향으로 합침

4.append
=>인덱스가 별의미가 없는 경우 무조건 행방으로 합치는 함수

5.combine_first
=>양쪽에 겹쳐지는 인덱스가 존재하는 경우에 무조건 호출하는 쪽의 값으로 설정

**그룹화
=>DataFrame의 내용을 그룹 단위로 분할해서 탐색하는 것
=>그룹화를 한 후 집계, 변환, 필터링을 적용
=>분할을 위해서는 groupby 함수를 이용하고 변환에는 apply 함수를 적용

1.groupby 함수
=>그룹화할 컬럼이름을 대입하면 그룹화를 수행, 컬럼이름은 1개도 되고 컬럼이름의 list도 가능
=>그룹별 데이터를 별도가 가져오고자 하는 경우에는 get_group(그룹이름)
=>빠른 열거를 이용하면 그룹화할 때 사용한 키와 데이터를 튜플로 접근을 할 수 있습니다.
파이썬은 튜플을 나누어서 저장 가능
=>집계함수(개수, 합계, 평균, 최대값, 최소값, 표준편차, 분산, 중간값, 사분위수) 사용 가능
=>mean(), max(), min(), sum(), count(), size(), var(), std(), first(), last(), describe(), info() 등
=>apply()를 호출해서 변환 가능 - 매개변수 1개를 받아서 return 하는 함수를 대입
=>filter()를 호출해서 원하는 데이터만 추출 - 매개변수 1개를 받아서 bool 을 리턴하는 함수를 대입
=>직접 만든 함수를 대입해서 결과를 얻고자 하는 경우에는 agg 함수를 이용
agg 함수에는 함수의 list를 대입해도 됩니다.

2.멀티 인덱스
=>인덱스를 여러 그룹으로 설정한 것
=>멀티 인덱스로 설정된 데이터 모임에서 특정한 인덱스의 데이터를 가져오고자 하면 loc[(첫번째 인덱스 값, 두번째 인덱스 값...)]
=>xs 라는 함수를 이용할 수 있는데 이 경우에는 첫번째 매개변수로 인덱스 이름을 대입하고 level에 인덱스의 값을 대입합니다.

3.pivot_table()
=>데이터를 그룹화하기 위한 함수
=>데이터를 행과 열 단위로 그룹화해서 기술 통계 값을 출력해주는 함수
pandas.pivot_table(데이터프레임, values=[연산을 수행할 컬럼이름 나열], index=[index로 사용할 컬럼이름 나열], columns=[컬럼으로 사용할 이름 나열], margins=전체 데이터 출력 여부, argfunc=수행할 함수, fill_value=NA 인 경우의 대체값)
=>pivoi_table 함수를 호출하면 인덱스는 대부분의 경우 멀티 인덱스로 생성되는데 해제하고자 하는 경우에는 reset_index 를 호출하면 됩니다.

**서울시 구별 CCTV(자치구별 cctv) 개수 와 인구수를 시각화
1.데이터 가져오기
data.seoul.go.kr 사이트에서 서울시와 관련된 데이터를 가져오기
=>cctv 개수 ->cctv.xlsx
=>인구 데이터 -> pop.txt

2.python에서 2개의 파일을 내용을 읽어서 DataFrame으로 만들기
import pandas as pd
#1.cctv.xlsx 파일과 pop.txt 파일의 내용 읽기

cctv = pd.read_excel('./data/cctv.xlsx')
print(cctv.head())
print()
print(cctv.info())

#skiprows=2 2줄 건너뛰고 읽기
#delimiter= '\t' 구분자는 탭
#thousands=',' 천단위 구분기호는 ,
pop = pd.read_csv('./data/pop.txt', skiprows=2,
                  delimiter='\t', thousands=',')
print(pop.head())
print()
print(pop.info())

3.컬럼이름 수정하고 구이름을 동일한 형태로 만들기
cctv.rename(columns={cctv.columns[0]:'구별'}, 
                     inplace=True)
pop.rename(columns={pop.columns[1]:'구별'}, 
                     inplace=True)
#cctv 의 구별 데이터에서 공백을 전부 제거하기
gu = []
for x in cctv['구별']:
    gu.append(x.replace(' ', ''))
cctv['구별'] = gu

print(cctv['구별'])

4.불필요한 컬럼이나 열을 제거
=>컬럼이나 열을 제거하는 방법은 현재 데이터프레임에서 직접 제거(drop 함수 이용)
=>필요한 컬럼이나 열만 추출
#pop에서 기간, 구별, 계, 남자, 여자 열만 추출
pop = pop[['기간','구별','계','남자','여자']]

#0번 행을 제거
pop.drop([0], inplace=True)

#여성비율이라는 새로운 컬럼을 추가 - 여자/계 * 100
pop['여성비율'] = pop['여자']/pop['계'] * 100

print(pop)

5.2개의 데이터프레임을 합치기
#cctv 와 pop을 합치기 - 기준은 구별
df = pd.merge(cctv, pop, on='구별')
print(df)

6.합쳐진 데이터프레임에서 불필요한 컬럼 제거
2011년 이전, 2012년, 2013년, 2014년, 2015년, 2016년, 2017년, 기간

7.구별 컬럼을 인덱스로 설정
#구별 컬럼을 인덱스로 설정
df.set_index('구별', inplace=True)
print(df)

8.그래프 그리기 - matplotlib 이용
#그래프 그리기 위한 패키지
import matplotlib.pyplot as plt

#그래프에서 한글 처리를 위한 패키지
from matplotlib import font_manager, rc
import platform

#운영체제를 확인해서 글꼴 설정
if platform.system() == 'Windows':
    font_name = font_manager.FontProperties(
            fname='c:/Windows/Fonts/malgun.ttf').get_name()
    rc('font', family=font_name)
elif platform.system() == 'Darwin':
    rc('font', famaly='AppleGothic')

#cctv 개수를 가지고 막대 그래프 그리기
df['소계'].plot(kind='bar', figsize=(10,10))
plt.show()

9.인구수(계)와 cctv 개수(소계)를 가지고 산포도 그리기
plt.figure(figsize=(8,8))
plt.scatter(df['계'], df['소계'], s=50)
plt.xlabel('인구수')
plt.ylabel('cctv 개수')
plt.grid()
plt.show()

10.numpy 의 polyfit 이라는 함수를 이용해서 다항식을 구해서 선 그래프 그리기
=>다항식 -> 회귀식
import numpy as np
fp1 = np.polyfit(df['계'], df['소계'], 1)
f1 = np.poly1d(fp1)
print(f1)

#선그래프 그리기
#100000 부터 700000까지를 100개로 분할 배열 생성
fx = np.linspace(100000, 700000, 100)
plt.figure(figsize=(8,8))
plt.scatter(df['계'], df['소계'], s = 50)
plt.plot(fx, f1(fx), ls='dashed', lw=3, color='g')
plt.xlabel('인구수')
plt.ylabel('cctv 개수')
plt.grid()
plt.show()

11.산포도의 각 점에 자신의 이름을 표시하고 잔차(실제 데이터와 예측된 데이터와의 차이)를 점의 색상으로 설정
#잔차를 색상으로 표시하고 지역 이름을 점위에 출력
#잔차 계산
df['잔차'] = np.abs(df['소계'] - f1(df['계']))
plt.figure(figsize=(14,12))
plt.scatter(df['계'], df['소계'],c=df['잔차'], s = 50)
plt.plot(fx, f1(fx), ls='dashed', lw=3, color='g')

#그래프에 텍스트 출력하기
for n in range(25):
    plt.text(df['계'][n]*1.02, df['소계'][n]*0.98,
             df.index[n], fontsize=12)

plt.xlabel('인구수')
plt.ylabel('cctv 개수')
plt.colorbar()
plt.grid()
plt.show()

**데이터 구조화
1.stack 과 unstack
=>stack은 컬럼을 인덱스로 이동시켜 데이터를 길게 쌓는 것이고 unstack은 쌓은 것을 옆으로 늘어뜨리는 것
=>읽어온 데이터의 구조가 원하는 구조가 아닐 때 이러한 구조화 메소드를 이용해서 원하는 구조로 만들어서 데이터 분석을 수행합니다.

2.melt
=>여러 개의 컬럼의 데이터를 합쳐서 하나의 컬럼으로 만드는 것
=>데이터프레임과 id_vars 매개변수에 합치고자 하는 컬럼 이름의 list를 대입하면 됩니다.

3.crosstab
=>행과 열을 기준으로 빈도를 세어서 테이블을 만들어주는 함수
=>교차분석 할 때 이용 - 도수분포표(frequency table)를 만들어주는 기능
=>함수에 행 이름과 열 이름을 설정
=>머신러닝 결과 등을 나타낼 때 자주 이용













