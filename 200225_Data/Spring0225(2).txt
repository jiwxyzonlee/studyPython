1. XML 스키마를 이용한 AOP 설정 방법

1) pom.xml 파일에 AOP를 위한 의존성을 추가

2) 공통관심사항을 가진 클래스를 생성해서 메소드를 추가

3) Spring 설정 파일에 <aop:config> 태그를 이용해서 Aspect 설정

4) Advice를 어떤 point cut에 설정할 것인지를 지정


		<!-- AOP 사용을 위한 의존성 라이브러리 -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>1.8.8</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aspects</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>

2) Advice(공통 관심 사항을 가진 객체)로 사용할 클래스를 생성하고 메소드 작성
- 기본 패키지 안에 생성
- com.pk.db.util.LoggingAdvice

package com.pk.db.util;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import org.aspectj.lang.ProceedingJoinPoint;
import org.springframework.stereotype.Component;

// Spring에서는 DTO 클래스를 제외하고는 클래스 이름 위에 어노테이션을 추가해서
// Bean을 자동생성하도록 합니다.
@Component
public class LoggingAdvice {
	// 리턴 타입과 매개변수는 변경할 수 없음
	public Object invoke(ProceedingJoinPoint joinPoint) {
		Calendar cal = new GregorianCalendar();
		
		Date date = new Date(cal.getTimeInMillis());
		System.out.println(date + "요청이 발생함");
		
		Object obj = null;
		try {
			// 원래 호출할 메소드
			obj = joinPoint.proceed();
		} catch (Throwable e) {
			e.printStackTrace();
		}
		
		return obj;
	}

}

3) servlet-context.xml 파일에 aop 네임스페이스를 추가

4) servlet-context.xml 파일에 aop 설정태그를 추가

	<!-- aop 설정 -->
	<!-- com.pk.db 패키지 내에 있는 Controller라는 이름으로 끝나는 클래스의 메소드이름은 상관 없고
	 매개변수개수도 상관없이 호출만 되면 LoggingAdvice클래스의 invoke 메소드가 호출됨 -->
	<aop:config>
		<aop:aspect id="traceAspect" ref="loggingAdvice">
			<aop:pointcut id="publicMethod"
			expression="execution(public * com.pk.db..*Controller.*(..))" />
			<aop:around pointcut-ref="publicMethod" method="invoke" />
		</aop:aspect>
	</aop:config>

->> *에 integer 적으면 integer 인식됨


3. Aspect 어노테이션을 이용하는 방법

1) Java 클래스에 @Aspect라는 어노테이션을 추가

2) 수행할 메소드 위에 execution을 작성

3) 스프링 설정 파일에 aop:aspectj-autoproxy 태그를 설정


4. 실습
- Dao클래스의 메소드를 호출할 때 현재 시간과 데이터베이스에 접근했다고 로그를 기록

1) 기본 패키지 안에 Advice로 사용할 클래스를 생성
- 기본패키지.util.LoggingDao

package com.pk.db.util;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.springframework.stereotype.Component;

@Component
// AOP 클래스라는 어노테이션
@Aspect
public class LoggingDao {
	
	@Around("execution(public * com.pk.db..*Dao.*(..))")
	public Object invoke(ProceedingJoinPoint joinPoint) {
		Calendar cal = new GregorianCalendar();
		
		Date date = new Date(cal.getTimeInMillis());
		System.out.println(date + "요청이 발생함");
		
		Object obj = null;
		try {
			obj = joinPoint.proceed();
		} catch (Throwable e) {
			e.printStackTrace();
		}
		return obj;
	}

}

2) servlet-context.xml 파일에 autoproxy 설정 추가

Java 개발
Spring
- MyBatis
- Hibernate

+ AOP


DB
- Oracle
- MySQL

----------
+ Spring Security
+ Social Login
----------
Web
자바스크립트 라이브러리
- jQuery
- bootstrap

- vue    출력<추천
- react  출력<추천

- angular


App
OpenAPI 활용 - 날씨, 지도
OpenAPI 생성 (RestController)  - Android

$.ajax 보다 JavaScript 쓰기

자료구조
알고리즘 -> java로 천천히 구현해보기

Java
- scala - 서버, 빅데이터
- kotlin - andoid, 서버, 

node.js, python + MongoDB

*/

형상관리 툴 git, github
Software Configuration Management, Version Control

나중에 대회에서 git에 commit-push 해놓을 시 가산점
git repository 주소 던져 놓으면 됨

형상 관리 Tool - Git Hub


servlet은 자바 클래스 자바 클래스에 HTML을 추가하는 방식, 첫번째 요청이 오면 컴파일을 하여 클래스를 만들고 인스턴스를 만들어서 이 인스턴스 1개를 가지고 모든 요청 처리

jsp: HTML 페이지에 Java 코드를 추가하는 방식, 요청이 올 때마다 Servlet 클래스를 만들고 인스턴스를 만들어서 요청을 처리하고 삭제됨

Request: 클라이언트의 요청
Response: 클라이언트의 요청에 대한 서버의 응답


JUnit

AOP-관점지향 프로그래밍

서로 다른 브라우저에 동일한 콘텐츠를 제공하기 위한 기술
웹 표준: 누구나 동일한 콘텐츠를 사용할 수 있어야 한다
크로스 브라우징: 모든 브라우저에서 동일한 콘텐츠를 사용할 수 있어야 한다
반응형 웹디자인: 화면 크기에 상관없이 동일한 콘텐츠를 사용할 수 있어야 한다.

N-Screen
: 디바이스 종류에 상관없이 동일한 콘텐츠를 사용할 수 있어야 함

ajax
: 비동기적으로 서버에서 데이터를 받아오는 자바스크립트 기술
- 화면 전체를 갱신하지 않고 데이터를 받아서 화면의 일부분만 갱신하는 기술

Open API의 표준 데이터 포맷
- JSON : JavaScript의 데이터 표현 방법
- XML: 태그를 이용한 데이터 표현 방법

소프트웨어에서는 비용이라는 용어를 쓰지 가격이라고 말하지는 않음

White Box Test - 내부 구조 테스트, 안이 보임, 반복문이나 조건 등 테스트
Black Box Test - 기능 테스트, 결과만 봄, 입력이 주어지면 올바른 결과가 나왔는지만 테스트

Alpha Test: validation test(검증 시험), 개발자의 장소에서 사용자가 test
Beta Test: 사용자의 장소에서 사용자가 test

SQL Mapper: SQL고 자바코드의 분리 - 대표적으로 MyBatis
ORM: 테이블과 클래스를 매핑, 테이블의 행과 객체를 매핑 - 대표적으로 Hibernate

- SI업계는 SQL Mapper 솔루션 업체는 ORM
SI는 남들이 제작해달라고 하는 소프트웨어를 개발 -ERP(전사적 자원관리)
Solution: 특정 문제를 해결하기 위한 소프트웨어, 비슷한 유형의 프로젝트를 여러 번 했기 때문에 솔루션을 개발

- 전국 70% 사이버캠퍼스 만든 곳 1종 면허 필요

- websocket
: web 에서 연결형 통신(TCP)을 구현하기 위한 HTML5 API

Authentication:인증, 로그인과 관련

Authorization: 인가, 사용권한과 관련

DI
: 의존성 주입, 내부에서 사용할 데이터를 외부에서 생성한 후 대입받아 사용
@Autowired

개체 무결성
: primary key는 null이거나 중복될 수 없다

*annotation은 클래스-> 첫글자는 대문자로