


12. 로그아웃 구현
- login된 사실을 Session에 데이터를 저장해서 그 데이터를 확인해서 하게 됨
- logout은 Session에 저장된 데이터를 삭제하면 됨
->> 데이터 1개를 삭제할 때는 session.removeAttribute('key");
->> 세션 전체를 삭제하고자 할 때는 session.invalidate();
->> 일정 시간 동안 세션을 사용하지 않을 때 세션을 자동삭제하는 경우 web.xml 파일에 session-config 설정을 추가하면 되는데 시간 단위는 분


1) HomeController 클래스에 logout을 처리하는 메소드를 추가

	// 로그아웃을 처리하는 메소드
	@RequestMapping(value="/logout", method=RequestMethod.GET)
	public String logout(HttpServletRequest request, HttpSession session) {
		// Session 객체 만들기
		// request.getSession()해도 되고 Controller의 요청 처리 메소드에 매개변수로 추가해도 됨
		
		// 세션 초기화
		session.invalidate();
		// 로그인과 로그아웃도 redirect를 함
		return "redirect:./";
		
	}

2) web.xml 파일에 5분동안 세션을 사용하지 않으면 세션을 자동 초기화해주는 설정을 추가
- 모바일 페이지에서는 길게 설정하는 편이고 일반 PC용 페이지는 조금 짧게 설정함


13. 메인 화면의 데이터 출력 부분 수정

1) 메인 화면의 데이터 출력 영역의 크기를 제한
- 출력하는 데이터를 div 태그로 감싸고 div 태그의 높이를 설정한 후 overflow 속성을 이용해서 스크롤 바가 생기도록 만들어주면 됨

2) 데이터베이스에서 여러 개의 데이터를 조회
- 데이터베이스는 순차적으로 저장하는 List 구조가 아님
- 여러 개의 데이터를 조회할 때는 정렬을 고려해야 함

3) 데이터베이스의 데이터를 조회하는 서비스를 구현
- 자주 변경되는 데이터가 아닌 경우
->> 클라이언트가 요청할 때마다 애플리케이션 서버가 DB서버에게 sql을 전송해야 하는가

- 애플리케이션 서버가 DB에게 주기적으로 query를 전송하고 클라이언트의 요청은 애플리케이션 서버의 데이터로 처리하거나 클라이언트에 저장해두고 처리하는 방식

- ItemServiceImpl 클래스의 allItem 메소드를 수정

	@Override
	@Transactional
	public List<Item> allItem(HttpServletRequest request) {
		// Dao의 메소드에 파라미터가 없는 경우 Dao의 메소드를 호출해서 리턴하면 됨
		//return itemDao.allItem();
		//return hibernateDao.allItem();
		List<Item> list = hibernateDao.allItem();
		// list의 데이터를 정렬할 때는 list.sort()를 호출하면 되는데 이 경우는
		// list에 속한 데이터에 Comparable 인터페이스가 implements 되어 있어야 함
		// 그렇지 않은 경우에는 Comparator 인터페이스를 구현한 인스턴스를 대입해주어야 함
		
		// itemid의 내림차순 - itemid는 정수
		Comparator<Item> comp = new Comparator<Item>() {

			@Override
			public int compare(Item arg0, Item arg1) {
				return arg1.getItemid() - arg0.getItemid();
			}
			
		};
		
		list.sort(comp);
		
		return list;
	}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>1sortreverse.png


/*
AOP: 관점 지향 프로그래밍
(메소드에 동작)

Interceptor(URL에 동작)

Service
- 업무로직 
------------- 로그인 확인 : 업무와 상관 없음
------------- 로그 기록 : 업무와 상관 없음
- 비니지스? 비즈니스? 로직 - Domain 지식 필요
- 공통관심사항 - Developer

sevlet-context.xml
Service 앞에서 누구 수행, 뒤에서 누구 수행

IoC DI AOP
*/



**AOP(관점 지향 프로그래밍 - Aspect Oriented)
- 공통관심사항(common - cross cutting concern)과 비즈니스로직(core concern)을 분리해서 구현한 후 설정파일이나 어노테이션을 이용해서 결합을 시켜나가는 프로그래밍 방식

- 복잡한 로직을 구현할 때 이 방식을 취함
->> 파이썬에서도 어노테이션을 이용해서 이러한 구현이 어느정도 가능함
- spring에서는 url에 반응하는 HandlerInterceptor와 method 호출에 반응하는 AOP 2가지 형태로 구현



**HandlerInterceptor
- AOP 구현을 위해 제공되는 인터페이스


1. 메소드

1) preHandle
: Controller의 요청 처리 메소드를 호출하기 전에 호출되는 메소드  
- 이 메소드에서 true를 리턴하면 Controller의 요청 처리 메소드로 이동하고 false를 리턴하면 Controller의 요청 처리 메소드로 가지 않음

2) postHandle
: Controller의 요청 처리 메소드가 처리를 전부 수행하고 View로 이동하기 직전에 호출되는 메소드
- 예외 발생 시 호출되지 않음

) afterCompletion
: 요청을 전부 처리하고 난 후 호출되는 메소드 예외 발생 여부에 상관 없이 무조건 호출되는 메소드


2. 설정

1) 모든 요청에 반응
<mvc:interceptors>
	<ref bean = "인터셉터의 id" />
</

2) 특정 URL 패턴에 반응
<mvc:interceptors>
	<mvc:interceptor>
		<mvc:mapping path="URL 패턴"/>
		<ref bean="인터셉터의 id"/>
	</mvc:interceptor>
</mvc:interceptors>

- mvc:mapping과 ref bean의 순서를 변경하려면 안 됨


3. chat 요청으로 이동할 때 로그인이 되어 있지 않으면 로그인 페이지로 이동하도록 interceptor 생성

1) HandlerInterceptor 인터페이스를 implements한 클래스를 기본 패키지 안에 생성
- com.pk.db.util.AuthInterceptor

2) servlet-context.xml 파일에 interceptor 설정하는 코드를 추가

	<!-- interceptor 설정 : chat으로 이동할 때 interceptor가 동작하도록 설정 -->
	<interceptors>
		<interceptor>
			<mapping path="/chat"/>
			<beans:ref bean="authInterceptor"/>
		</interceptor>
	</interceptors>


4. chat.jsp 파일에서 이름을 입력하지 않고 로그인한 유저의 nickname을 이용하기
- 로그인을 하면 session에 member라는 이름으로 Member 객체가 저장되어 있음
- 자바스크립트에서 메시지 전송하는 send 메소드를 수정
		var send = function() {
			// 입력한 내용을 WebSocket 서버에 전달하고 message란은 클리어
			//var nickname = document.getElementById("nickname").value;
			var nickname = '${member.nickname}';
			var msg = document.getElementById("message").value;
			wsocket.send(nickname + ":" + msg);
			document.getElementById("message").value ='';
		}


5. chat으로 이동하려고 했는데 로그인이 되어 있지 않아서 로그인 페이지로 이동한 후 로그인에 성공하면 chat으로 이동하도록 해주는 설정을 추가
- 로그인 페이지로 이동할 때 메시지 저장해서 이동
- 인터셉터에서 이동하려고 했던 주소를 세션에 저장
- 로그인 성공했을 때 세션에 저장된 데이터를 확인해서 그 페이지로 이동하도록 해줘야 함

1) 인터셉터의 preHandle 메소드 수정


2) HomeController의 login을 POST로 처리하는 메소드를 수정
- login을 성공했을 때 session의 dest 값이 있으면 dest로 이동
->> 이동한 후에는 dest 값을 삭제해야 함



**Spring AOP
- 메소드의 수행 전이나 수행 후에 공통된 내용을 수행하고자 하는 경우 사용
- interceptor에서는 URL에 대해서 반응하기 때문에 웹 프로그래밍에서만 사용이 가능하지만 AOP는 메소드에 반응하기 때문에 모든 프로그래밍 방식에서 사용이 가능
- Spring에서는 AOP에 대해서 proxy 패턴을 사용함
->> AOP를 적용한 클래스를 상속받아서 Spring이 별도의 클래스를 만들고 인스턴스를 만들어서 메소드 호출을 하도록 합니다.
->> final class에는 AOP 적용이 안 됨

- 구현 가능한 Advice(메소드 호출 시점)
Before Advice
: 메소드 호출 전

After Returning Advice
: 메소드 수행 종료하고 리턴한 후

After Throwing Advice
: 메소드 수행 중 예외 발생 후

After Advice
: 메소드 수행 후

Around Advice
: 메소드 수행 전후

- 구현 방법
->> XML 기반의 POJO 클래스 또는 MethodInterceptor 인터페이스를 이용한 구현
@Aspect Annotation을 이용하는 방법

- XML기반이 먼저 만들어졌고 나중에 어노테이션이 추가된 것

- 필요한 의존성 라이브러리
aspectjweaver, spring-aop, spring-aspects