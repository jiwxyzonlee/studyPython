변수 < 함수 < 클래스 < 파일(모듈) < 패키지
함수 부터를 모듈 프로그래밍 이라고 합니다.

**클래스
1.용어
1)class: 동일한 목적을 달성하기 위해 모인 변수와 함수의 집합
사용자 정의 자료형 : 사용자가 만드는 자료형

2)object: 프로그래밍에서 사용되는 모든 것

3)class object: 클래스와 동일한 의미

4)instance: class를 기반으로 만들어진 객체

2.파이썬에서 클래스 정의
class 클래스이름:
	코드 작성

3.method
=>method: class 안에 만들어진 함수
1)member method: 만들기는 클래스에 만들지만 실제 사용은 instance가 하는 메소드
=>python에서는 member method를 만들 때 매개변수가 반드시 1개 이상 있어야 합니다.
이 매개변수는 instance 자신의 참조가 대입됩니다.
이름은 관습적으로 self 라고 합니다.
도움말을 확인할 때 첫번째 매개변수로 self가 있으면 이 메소드는 member method 입니다.

def 메소드이름(self[, 다른 매개변수를 선언]):
	메소드 수행 내용

2)member method 호출
자신의 클래스 내부에서 호출: self.메소드이름(매개변수) -> self에는 아무것도 대입하지 않습니다.

클래스 외부에서 호출 - 바운드 호출 : 인스턴스이름.메소드이름(매개변수) -> self에는 아무것도 대입하지 않음

클래스 외부에서 호출 - 언바운드 호출 : 클래스이름.메소드이름(인스턴스, 매개변수) -> self에 인스턴스를 대입해야 합니다.

3)클래스의 인스턴스
생성자(매개변수)

4.속성(field, attribute..)
=>객체 안에 데이터를 저장할 수 있는 변수
=>클래스 안에서 메소드 외부에 변수가 선언되면 클래스가 사용할 수 있고 인스턴스는 읽을 수만 있습니다.
인스턴스가 메소드 외부에 선언된 변수를 수정하게 되면 인스턴스 안에 변수를 만들어서 저장을 합니다.

=>메소드 안에서 만들어진 변수는 메소드 안에서만 사용이 가능한 지역변수가 됩니다.
=>메소드 안에서 변수를 만들 때 self.변수명을 사용하면 인스턴스가 별도로 소유하는 인스턴스 변수가 됩니다.
=>파이썬의 인스턴스는 속성을 추가할 수 있습니다.
인스턴스이름.속성명 = 데이터
이 속성이 존재하면 수정이고 없으면 추가해서 대입합니다.

5.특수 속성
=>파이썬이 용도를 정의해놓은 속성
=>__ 로 시작하고 __로 끝남
대표적인 속성이 __doc__ 로 함수에서 이 속성에 문자열을 대입하면 help로 확인이 가능합니다.

6.Constructor(생성자)
=>__init__ 라는 이름으로 생성자를 만듭니다.
=>첫번째 매개변수는 self이고 이후에 매개변수 추가가 가능
만들지 않아도 self 만 가진 생성자가 클래스에 자동으로 추가됩니다.
__init__(self) 는 존재합니다.

=>새로 생성자를 추가하면 기본적으로 제공되는 생성자는 소멸됩니다.
=>생성자를 만드는 이유는 다른 메소드를 호출하지 않고 인스턴스 속성을 초기화하기 위해서 입니다.
=>생성자를 호출하는 방법은 클래스이름(매개변수) 형태로 하고 호출하면 메모리 할당을 한 후 그 메모리에 대한 참조를 리턴합니다.

7.__del__
=>인스턴스가 파괴될 때 호출되는 메소드
=>self 이외의 매개변수는 가질 수 없음
=>파이썬의 메모리 관리는 Reference Count(참조 횟수) 방식
=>참조 횟수가 0이 되면 파괴됩니다.
=>인스턴스가 변수에 대입되면 참조 횟수는 1 증가
del(변수명) 을 호출하거나 None을 대입하면 참조 횟수가 1 감소
=>참조 횟수를 확인하고자 하는 경우는 sys 모듈의 getrefcount 라는 함수에 인스턴스를 대입하면 됩니다.

8.정적 메소드 : 클래스가 호출하는 메소드
1)static 메소드
메소드 위에 @staticmethod 라고 기재하고 매개변수를 만들 때 self를 만들지 않습니다.

2)class 메소드
메소드 위에 @classmethod 라고 기재하고 첫번째 매개변수는 클래스 자신이 대입되는 cls 를 추가

9.__slots__ 속성
=>이 속성에 list로 문자열을 대입하면 문자열에 해당하는 속성만 사용 가능

10.property
=>객체 지향 프로그래밍에서는 인스턴스가 변수를 직접 사용하는 것을 권장하지 않습니다.
getter 와 setter를 이용해서 접근하는 것을 권장
=>파이썬에서는 인스턴스 변수를 만들 때 __를 앞에 붙이면 인스턴스가 변수에 접근을 못합니다.
=>property(fget=None, fset=None, fdel=None, doc=None) 함수를 이용해서 getter 와 setter 메소드를 지정할 수 있습니다.
변수를 사용하는 것처럼 사용하지만 실제로는 property에 설정된 메소드를 호출합니다.

11.연산자 오버로딩
=>연산자의 기능을 변경하는 것
=>__add__(self, other) 이 메소드를 만들면 이 클래스의 인스턴스들은 + 연산을 할 수 있음
그 이외에도 sub(-), mul(*) 을 재정의하면 다른 연산자도 사용 가능
=>dir(인스턴스 나 클래스)로 사용할 수 있는 메소드를 확인해서 어떤 연산이 가능한지 확인을 할 필요가 있습니다.

12.상속
class 클래스이름(클래스 이름 나열):
=>파이썬은 다중 상속이 되서 여러 개의 클래스로부터 상속 가능
파이썬은 여러 클래스에 동일한 이름의 속성이나 메소드가 있으면 앞에 작성한 클래스의 것을 상속받습니다.

**파이썬 과 R 의 차이
R: 분석만 가능 - 최근에는 프로그램을 만드는 것도 가능하지만 불편합니다.
Python: 범용 프로그래밍 언어 - 분석을 쉽게 할 수 있는 라이브러리가 제공, 분석도 가능

단순하게 분석을 해서 보기만 할거라면 R이 좋지만 결과물을 생성할려고 하면 Python이 우세합니다.











